<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.blinkfox</groupId>
    <artifactId>jpack-to-test</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>Test JPack Mojo</name>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.blinkfox</groupId>
                <artifactId>jpack-maven-plugin</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
                <configuration>
                    <!-- JVM 运行所需的参数选项. -->
                    <vmOptions>-Xms512m -Xmx1024m</vmOptions>
                    <!-- 所集成的 Java 服务程序运行所需的参数. -->
                    <programArgs></programArgs>
                    <cleanPackDir>false</cleanPackDir>
                    <!-- 是否生成 Windows、Linux 下默认的 bin 目录，默认 true，即生成 jpack 自带 bin 目录和文件. -->
                    <generateBinDir>true</generateBinDir>
                    <!-- 需要复制到部署包中 config 目录下的 yml 或者 .properties 文件的配置文件路径，
                        它的值必须是一个具体的文件，可以是相对路径、绝对路径或网络资源. -->
                    <configFiles>
                        <param>src/test/resources/application.yml</param>
                    </configFiles>
                    <!-- 打包哪些平台的包，不填写则代表所有平台. 目前支持 Windows 和 Linux 两种(大小写均可). -->
                    <platforms>
                        <param>Windows</param>
                        <param>Linux</param>
                        <param>Docker</param>
                    </platforms>
                    <windows>
                        <vmOptions>-Xms1024m -Xmx2048m</vmOptions>
                        <programArgs>--server.port=7070</programArgs>
                        <configFiles>
                            <param>src/test/resources/application-dev.yml</param>
                        </configFiles>
                        <copyResources>
                            <copyResource>
                                <from>README.pdf</from>
                                <to>.</to>
                            </copyResource>
                        </copyResources>
                        <excludeFiles>
                            <param>logs</param>
                        </excludeFiles>
                    </windows>
                    <linux>
                        <vmOptions>-Xms512m -Xmx2048m</vmOptions>
                        <programArgs>--server.port=9090</programArgs>
                        <generateBinDir>true</generateBinDir>
                        <configFiles>
                            <param>src/test/resources/application-prod.yml</param>
                        </configFiles>
                        <copyResources>
                            <copyResource>
                                <from>README.doc</from>
                                <to>.</to>
                            </copyResource>
                        </copyResources>
                        <excludeFiles>
                            <param>docs</param>
                        </excludeFiles>
                    </linux>
                    <docker>
                        <!-- 构建 Docker 镜像的 Dockerfile 文件的相对路径，没有此配置项或者不填写则使用 jpack 默认的 Dockerfile 文件.
                            ，如果填写了自己的 Dockerfile 文件地址，则后面的`fromImage`、`expose`、`volumes`、`customCommands` 配置就不会被使用.-->
                        <!--<dockerfile>Dockerfile</dockerfile>-->
                        <!-- 构建镜像的几个基础参数, registry远程仓库地址，不填写默认视为 Dockerhub 的地址;
                            repo不填写则默认为 groupId，name 不填写则默认为 artifactId，tag不填写则默认为 version.-->
                        <registry> </registry>
                        <repo>blinkfox</repo>
                        <name>jpack-test</name>
                        <tag>1.0.0-SNAPSHOT</tag>
                        <vmOptions>-Xms512m -Xmx1536m</vmOptions>
                        <programArgs>--server.port=6060</programArgs>
                        <configFiles>
                            <param>src/test/resources/application-test.yml</param>
                        </configFiles>
                        <copyResources>
                            <copyResource>
                                <from>README.html</from>
                                <to>.</to>
                            </copyResource>
                        </copyResources>
                        <excludeFiles>
                            <param>config</param>
                        </excludeFiles>
                    </docker>
                    <!-- 需要copy 哪些资源(可以是目录或者具体的相对、绝对或网络资源路径)到部署包中的某个目录;
                        to 的值只能是目录，为空或者 '.' 或者 '/' 符号则表示复制到各平台包的根目录中，否则就复制到具体的目录下 -->
                    <copyResources>
                        <copyResource>
                            <from>README.md</from>
                            <to>.</to>
                        </copyResource>
                    </copyResources>
                    <!-- 排除哪些文件或目录不需要打包进压缩包中，输入文件的相对路径即可. -->
                    <excludeFiles>
                        <param>logs</param>
                        <param>README.md</param>
                        <param>xxxxx.abc</param>
                    </excludeFiles>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
