<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.blinkfox</groupId>
    <artifactId>jpack-to-test</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>Test JPack Mojo</name>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.blinkfox</groupId>
                <artifactId>jpack-maven-plugin</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>docker-build</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
                <configuration>
                    <!-- JVM 运行所需的参数选项. -->
                    <vmOptions>-Xms512m -Xmx1024m</vmOptions>
                    <!-- 所集成的 Java 服务程序运行所需的参数. -->
                    <programArgs>--server.port=8080</programArgs>
                    <!-- 需要复制到部署包中 config 目录下的 yml 或者 .properties 文件的配置文件路径，
                        它的值必须是一个具体的文件，可以是相对路径、绝对路径或网络资源. -->
                    <configFiles>
                        <param>src/test/resources/application.yml</param>
                        <param>src/test/resources/application-local.yml</param>
                    </configFiles>
                    <!-- 打包哪些平台的包，不填写则代表所有平台. 目前支持 Windows 和 Linux 两种(大小写均可). -->
                    <platforms>
                        <param>Docker</param>
                    </platforms>
                    <!-- 是否跳过构建期间的错误情况，可以填写true, false, default, 默认是default，此时会视情况忽略某些异常，
                        如：Docker 环境检查，如果没有 Docker 环境,则跳过 Docker 的构建. -->
                    <skipError>false</skipError>
                    <docker>
                        <!-- 构建 Docker 镜像的 Dockerfile 文件的相对路径，没有此配置项或者不填写则使用 jpack 默认的 Dockerfile 文件.
                            ，如果填写了自己的 Dockerfile 文件地址，则后面的`fromImage`、`expose`、`volumes`、`customCommands` 配置就不会被使用.-->
                        <dockerfile> </dockerfile>
                        <!-- 构建镜像的几个基础参数, registry远程仓库地址，不填写默认视为 Dockerhub 的地址;
                            repo不填写则默认为 groupId，name 不填写则默认为 artifactId，tag不填写则默认为 version.-->
                        <registry>registry.yourcompany.com:5000</registry>
                        <repo>blinkfox</repo>
                        <name>jpack-test</name>
                        <tag>1.0.0-SNAPSHOT</tag>
                        <!-- FROM 的镜像，如果没有配置该值，将默认是 openjdk:8-jdk-alpine. -->
                        <fromImage>openjdk:8-jdk-alpine</fromImage>
                        <!-- 对外暴露的端口，不配置该值，将不会在 Dockerfile 中生成 EXPOSE 指令. -->
                        <expose>8080</expose>
                        <!-- 挂载的数据卷，不填写则默认挂载 "/tmp" 和 "/logs" 目录. -->
                        <volumes>
                            <param>/tmp</param>
                            <param>/logs</param>
                        </volumes>
                        <!-- 自定义的 Dockerfile 指令选项，可以填写多个值，每个值在 Dockerfile 中占一行，充当Dockerfile中的一条指令，
                            例如：以下是设置时区的一个指令. -->
                        <customCommands>
                            <param>RUN echo 'Asia/Shanghai' >/etc/timezone</param>
                        </customCommands>
                        <!-- jpack 的 Docker 构建的默认目标是构建镜像，如果你需要其他目标的话，可以再此配置（可配多个）.
                            目前这里支持导出镜像为 .tar 包(save)和 推送镜像到远程仓库(push) 两种. -->
                        <extraGoals>
                            <param>save</param>
<!--                            <param>push</param>-->
                        </extraGoals>
                        <!-- jpack 推送到远程私有镜像仓库的用户权限认证信息，通常至少需要填写用户名和密码两项信息，
                            serverAddress 不填写就默认使用 registry. -->
                        <registryUser>
                            <username>blinkfox</username>
                            <password>123456</password>
                            <email>your-emial-name@gmail.com</email>
                            <serverAddress> </serverAddress>
                            <identityToken> </identityToken>
                        </registryUser>
                    </docker>
                    <excludeFiles>
                        <param>README.md</param>
                    </excludeFiles>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
